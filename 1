import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.StringTokenizer;

public class solution_perf {
	

	public static void main(String[] args) throws Exception{ 

		long start, end;
		start = System.currentTimeMillis();
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));  
//		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));  
//		start = System.currentTimeMillis();
		int T = Integer.valueOf(br.readLine());    
		int[][] ins;
		int[] bs, sum;  
		ArrayList<Per> lst;  
		for(int ts = 1;ts<=T;ts++){   
			int N = Integer.valueOf(br.readLine());   
			lst = new ArrayList<Per>();
			bs = new int[N];
			sum = new int[N];
			for(int i=0;i<N;i++){    
				StringTokenizer st = new StringTokenizer(br.readLine());    
				int a = Integer.valueOf(st.nextToken());    
				int b = Integer.valueOf(st.nextToken());
				bs[i] = b;
				sum[i] = a + b;
//				Per t = new Per(a, b);    
//				lst.add(t);
			}   
//			end = System.currentTimeMillis();
//			System.out.println("duration1="+(end-start));
			
//			Comparator<Per> sort = new Comparator<Per>(){    
//				public int compare(Per o1, Per o2){     
//				return o1.getS() < o2.getS()? -1 : (o1.getS() < o2.getS()?1:0);    
//				}};   
//				
//			Collections.sort(lst, sort);
//			print(lst);

			Arrays.sort(sum);
//			end = System.currentTimeMillis();
//			System.out.println("duration2="+(end-start));
			
//			int len = lst.get(N-1).s;   
//			int[] dp = new int[len];      
			
			int ans = Integer.MIN_VALUE;
			// i : 입력된 향수 중 사용할 향수
			for(int i=0;i<N;i++){
				//    System.out.println("i="+i+", j="+lst.get(i).a);    
				
//				int tmp = lst.get(N-i-1).getS();
				int tmp = sum[N-i-1];
				if(isSubsetSum(bs, bs.length, tmp)){
					if(tmp > ans){
						ans = tmp;
					}
				}else{
					int x = bs[N-i-1];
					if(x > ans){
						ans = x;
					}
				}
			}
			System.out.println("#"+ts+" "+ans);
//			end = System.currentTimeMillis();
//			System.out.println("duration3="+(end-start));
			/*
			bw.write("#"+ts+" "+ans);   
			bw.newLine();   
			bw.write( (end-start)+"");
			bw.flush();  
	*/
		}    
	}
		
		
	static boolean isSubsetSum(int set[], int n, int sum)    {       
			// Base Cases       
			if (sum == 0)  return true;       
			if (n == 0 && sum != 0) return false;             
			if (set[n-1] > sum) return isSubsetSum(set, n-1, sum);             
			return isSubsetSum(set, n-1, sum) || isSubsetSum(set, n-1, sum-set[n-1]);    
	}
	
	public static void print(ArrayList<Perf> list) {  
		for (Perf each : list)    
		System.out.println(each.getS()+":"+each.getA()+","+each.getB()); 
	}
}
	
class Per {
		int a, b, s;
		public int getA() {  return a; } 
		public void setA(int a) {  this.a = a; } 
		public int getB() {  return b; } 
		public void setB(int b) {  this.b = b; } 
		public int getS() {  return s; } 
		public void setS(int s) {  this.s = s; } 
		public Per(int A, int B){  this.a = A;  this.b = B;  this.s = A + B; } 
}
