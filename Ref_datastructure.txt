1. SDS_PRO_3_2
import java.io.*;
import java.util.*;
  
public class source {
    static int N, Q;
    static int[] A, par;
      
    static int cp(int n) {
        if (par[n] == n) return n;
        return par[n] = cp(par[n]);
    }
     
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        N = Integer.parseInt(br.readLine());
        Q = Integer.parseInt(br.readLine());
        par = new int[N+1];
        for (int i=1;i<=N;i++) par[i] = i;
        while (Q-- > 0){
            StringTokenizer st = new StringTokenizer(br.readLine());
            int t = Integer.parseInt(st.nextToken());
            int a = Integer.parseInt(st.nextToken());
            int b = Integer.parseInt(st.nextToken());
            if (t == 0){
                int p = cp(a), q = cp(b);
                if (p == q) continue;
                par[q] = p;
            }else{
                int p = cp(a), q = cp(b);
                System.out.println(p == q ? 1 : 0);
            }
        }
    }
}

2. SDS_PRO_3_4
import java.io.*;
import java.util.*;
 
public class source {
    static int N;
    static int[] A;
     
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        N = Integer.parseInt(br.readLine());
        A = new int[N+1];
        StringTokenizer st = new StringTokenizer(br.readLine());
        for (int i=1;i<=N;i++) A[i] = Integer.parseInt(st.nextToken());
        Stack<Integer> stk = new Stack<Integer>();
        for (int i=1;i<=N;i++){
            while (!stk.isEmpty() && A[stk.peek()] <= A[i]) stk.pop();
            int ans = stk.isEmpty() ? 0 : stk.peek();
            bw.write(ans + " ");
            stk.push(i);
        }
        bw.write("\n");
        bw.flush();
        bw.close();
    }
}

3. SLIDING_WINDOWS
import java.io.*;
import java.util.*;
  
public class source {
    static int N, K;
    static int[] A;
      
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        K = Integer.parseInt(st.nextToken());
        A = new int[N+1];
        st = new StringTokenizer(br.readLine());
        for (int i=1;i<=N;i++) A[i] = Integer.parseInt(st.nextToken());
        Deque<Integer> mn = new ArrayDeque<Integer>();
        Deque<Integer> mx = new ArrayDeque<Integer>();
        long sum = 0;
        for (int i=1;i<=N;i++){
            while (!mn.isEmpty() && A[mn.getLast()] >= A[i]) mn.pollLast();
            while (!mx.isEmpty() && A[mx.getLast()] <= A[i]) mx.pollLast();
            mn.addLast(i);
            mx.addLast(i);
            sum += A[i];
            if (i > K) sum -= A[i-K];
            while (mn.getFirst() <= i-K) mn.pollFirst();
            while (mx.getFirst() <= i-K) mx.pollFirst();
            if (i >= K)
                bw.write(A[mn.getFirst()] + " " + A[mx.getFirst()] + " " + sum + "\n");
        }
        bw.flush();
        bw.close();
    }
}

4. SDS_PRO_3_6
import java.io.*;
import java.util.*;
 
public class source {
    static int N;
    static int[] A;
     
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        N = Integer.parseInt(br.readLine());
        PriorityQueue<Integer> L = new PriorityQueue<Integer>();
        PriorityQueue<Integer> R = new PriorityQueue<Integer>();
        for (int i=1;i<=N;i++){
            int v = Integer.parseInt(br.readLine());
             
            if (R.isEmpty() || R.peek() > v) L.add(-v);
            else R.add(v);
             
            while (L.size() > R.size()+1)
                R.add(-L.poll());
            while (R.size() > L.size())
                L.add(-R.poll());
             
            if (i % 2 == 1) System.out.println(-L.peek());
        }
    }
}

5. SDS_PRO_3_5
import java.io.*;
import java.util.*;
 
public class source {
    static int N, Q, TS, ST;
    static int[] A;
    static long[] tree;
     
    static void build_tree() {
        for (TS=1;TS<N;TS<<=1); TS <<= 1;
        ST = TS/2-1;
         
        tree = new long[TS];
        for (int i=1;i<=N;i++) tree[ST+i] = i;
        for (int i=ST;i>0;i--)
            tree[i] = tree[i+i] + tree[i+i+1];
    }
     
    static void update(int n, int v) {
        n += ST;
        tree[n] = v;
        for (n>>=1;n>0;n>>=1)
            tree[n] = tree[n+n] + tree[n+n+1];
    }
     
    static long get_sum(int l, int r) {
        long ret = 0;
        l += ST; r += ST;
        while (l <= r){
            if ((l&1) == 1)
                ret += tree[l++];
            if ((r&1) == 0)
                ret += tree[r--];
            l >>= 1; r >>= 1;
        }
        return ret;
    }
     
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
         
        N = Integer.parseInt(br.readLine());
        Q = Integer.parseInt(br.readLine());
         
        build_tree();
         
        while (Q-- > 0){
            StringTokenizer st = new StringTokenizer(br.readLine());
            int t = Integer.parseInt(st.nextToken());
            int a = Integer.parseInt(st.nextToken());
            int b = Integer.parseInt(st.nextToken());
            if (t == 0) update(a, b);
            else bw.write(get_sum(a, b) + "\n");
        }
        bw.flush();
        bw.close();
    }
}

7. REPRESENTATIVE

import java.io.*;
import java.util.*;
 
public class source {
    static int N, Q;
    static int TS, ST;
     
    static long[] S;
    static int[] mntree, mxtree;
     
    static int get_min(int l, int r) {
        int ret = Integer.MAX_VALUE;
        l += ST; r += ST;
        while (l <= r){
            if ((l&1) == 1) ret = Math.min(ret, mntree[l++]);
            if ((r&1) == 0) ret = Math.min(ret, mntree[r--]);
            l >>= 1; r >>= 1;
        }
        return ret;
    }
     
    static int get_max(int l, int r) {
        int ret = Integer.MIN_VALUE;
        l += ST; r += ST;
        while (l <= r){
            if ((l&1) == 1) ret = Math.max(ret, mxtree[l++]);
            if ((r&1) == 0) ret = Math.max(ret, mxtree[r--]);
            l >>= 1; r >>= 1;
        }
        return ret;
    }
     
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        N = Integer.parseInt(br.readLine());
        for (TS=1;TS<N;TS<<=1); TS <<= 1; ST = TS/2-1;
        mntree = new int[TS]; mxtree = new int[TS];
        S = new long[N+1];
        StringTokenizer st = new StringTokenizer(br.readLine());
        for (int i=1;i<=N;i++){
            int v = Integer.parseInt(st.nextToken());
            S[i] = S[i-1] + v;
            mntree[ST+i] = mxtree[ST+i] = v;
        }
        for (int i=ST;i>0;i--){
            mntree[i] = Math.min(mntree[i+i], mntree[i+i+1]);
            mxtree[i] = Math.max(mxtree[i+i], mxtree[i+i+1]);
        }
        Q = Integer.parseInt(br.readLine());
        while (Q-- > 0){
            st = new StringTokenizer(br.readLine());
            int a = Integer.parseInt(st.nextToken());
            int b = Integer.parseInt(st.nextToken());
            int mn = get_min(a, b), mx = get_max(a, b); long sum = S[b] - S[a-1];
            bw.write(mn + " " + mx + " " + sum + "\n");
        }
        bw.flush();
        bw.close();
    }
}
